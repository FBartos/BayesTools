name: "Copilot Setup Steps"

# Allow testing of the setup steps from your repository's "Actions" tab.
on: workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      # Cache R packages
      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}-${{ hashFiles('**/*.R') }}
          restore-keys: |
            ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}-
            ${{ runner.os }}-r-

      # Cache system dependencies
      - name: Cache system dependencies
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/copilot-setup-steps.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install JAGS and system dependencies on Linux
      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            libcurl4-openssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev \
            libcairo2-dev \
            pandoc \
            jags

      - name: Set up GitHub token
        run: |
          echo "GITHUB_PAT=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Install the required packages
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          
          # Check if packages are already installed before installing
          required_packages <- c('devtools', 'rcmdcheck', 'BayesFactor', 'RoBMA', 'runjags', 'rjags', 'rstan', 'scales', 'vdiffr', 'testthat', 'covr', 'pandoc')
          missing_packages <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
          
          if (length(missing_packages) > 0) {
            cat("Installing missing packages:", paste(missing_packages, collapse = ", "), "\n")
            install.packages(missing_packages)
          } else {
            cat("All required packages are already installed\n")
          }
          
          install.packages('mcptools')
          devtools::install_github("posit-dev/btw")

          devtools::install()
        shell: Rscript {0}

      - name: Install the package
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org"))
          devtools::install()
        shell: Rscript {0}

      - name: Verify JAGS installation
        run: |
          jags-terminal --version || echo "JAGS not found in PATH"
          pkg-config --exists jags && echo "JAGS pkg-config found" || echo "JAGS pkg-config not found"

      - name: Run basic package checks
        run: |
          cat('R version:', R.version.string, '\n')
          cat('JAGS available:', system('which jags-terminal', intern = TRUE), '\n')
          devtools::check(manual = FALSE, run_dont_test = TRUE)
        shell: Rscript {0}
